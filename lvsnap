#!/usr/bin/env bash
#
# This is the main lvsnap script.
# It is a wrapper for creating LVM snapshots

readonly CONFIG_ETC_FILE='/etc/lvsnap.conf'
readonly CONFIG_HOME_FILE='.lvsnap.conf'
readonly GRUB_CONFIG_FILES='/etc/grub2.cfg /etc/grub2-efi.cfg'
VERBOSE=0
DRY_RUN=0
EXCLUDE=""

########################################################################
# Prints what you're about to exec if verbose
# Globals:
#  VERBOSE
# Arguments:
#  command: the command you wish to run
# Returns:
#   None
########################################################################
function print_exec () {
  # Tried to execute here as well and failed, seems I am not the only one:
  # http://mywiki.wooledge.org/BashFAQ/050

  if [[ "${VERBOSE}" -eq 1 ]]; then
    echo $1
  fi
}

########################################################################
# Creates a snapshot you can restore later
# Globals:
#  CONFIG
#  VERBOSE
# Arguments:
#  None
# Returns:
#   None
########################################################################
function create () {
  
  ########################################################################
  # Prints the size of a directory
  # Globals:
  #   None
  # Arguments:
  #   mount_point
  #   key
  # Returns:
  #   size: Integer, size in KiB of the mountpoint
  ########################################################################
  function get_size () {
    local value
    value=$(/usr/bin/du -s $1 2>/dev/null | /usr/bin/sed -r 's/([0-9]+).*/\1/')
    if [[ "${PIPESTATUS[0]}" -ne 0 || "${PIPESTATUS[1]}" -ne 0 ]]; then
      err "/usr/bin/du or /usr/bin/sed was not found" 1
    fi
    echo $value
  }

  if [[ $VERBOSE -eq 1 ]]; then
    echo "Snapshotting:"
    list_devices '' "$EXCLUDE" '1,2'
    echo
  fi

  # Get the size of the physical backup partition
  
  local static_part_size=0
  
  for dir in $(list_devices 'physical' "$EXCLUDE" '2'); do
    local dir_size=$(get_size ${dir})
    if [[ "${VERBOSE}" -eq 1 ]]; then
      echo "Size of ${dir}: ${dir_size}kb"
    fi
    let "static_part_size += ${dir_size}"
  done
  # Give the static partition 50mb breathing room
  let "static_part_size += 51200" 
  
  if [[ "${VERBOSE}" -eq 1 ]]; then
    echo "Total size of physical backup partition is ${static_part_size}kb."
    echo
  fi
  
  # Create the LV snapshots
  
  for lv in $(list_devices 'logical' "$EXCLUDE" '1'); do
    local size
    local name
    size=$(get_lv_property "$lv" "lv_size") || err "/usr/sbin/lvs could not return size of $lv" 1
    name=$(get_lv_property "$lv" "lv_name") || err "/usr/sbin/lvs could not return name of $lv" 1
    
    print_exec "/usr/sbin/lvcreate -L${size} -s -n bup-${name} ${lv}"
    if [[ "${DRY_RUN}" -eq 0 ]]; then
      /usr/sbin/lvcreate -L"${size}" -s -n "bup-${name}" "${lv}"  >> /dev/null 2>&1 || err "/usr/sbin/lvcreate -L${size} -s -n bup-${name} ${lv} has a non-zero exit." 10
    fi
    
  done
  
  # Backup the physical partitions using rsync
  
  local vg
  vg=$(get_vg_name) || err "/usr/sbin/lvs could not return the name of the volume group" 1

  print_exec "/usr/bin/yes | /usr/sbin/lvcreate -Zy -L${static_part_size}k -n bup-physical ${vg}"
  if [[ "${DRY_RUN}" -eq 0 ]]; then
    /usr/bin/yes | /usr/sbin/lvcreate -Zy -L"${static_part_size}"k -n bup-physical "${vg}" >> /dev/null 2>&1 || err "/usr/bin/yes | /usr/sbin/lvcreate -Zy -L${static_part_size}k -n bup-physical ${vg} has a non-zero exit." 10
  fi
  
  print_exec "/usr/sbin/mkfs.ext4 /dev/${vg}/bup-physical"
  if [[ "${DRY_RUN}" -eq 0 ]]; then
    /usr/sbin/mkfs.ext4 /dev/"${vg}"/bup-physical >> /dev/null 2>&1 || err "/usr/sbin/mkfs.ext4 /dev/${vg}/bup-physical has a non-zero exit." 10
  fi
  
  print_exec "/usr/bin/mount /dev/${vg}/bup-physical /mnt"
  if [[ "${DRY_RUN}" -eq 0 ]]; then
    /usr/bin/mount /dev/"${vg}"/bup-physical /mnt  >> /dev/null 2>&1  || err "/usr/bin/mount /dev/${vg}/bup-physical /mnt has a non-zero exit." 10
  fi
  
  for dir in $(list_devices 'physical' "$EXCLUDE" '2'); do
    local drname
    drname=$(/usr/bin/basename ${dir}) || err '/usr/bin/basename not found' 1
    
    print_exec "/usr/bin/mkdir -p /mnt/${drname}"
    if [[ "${DRY_RUN}" -eq 0 ]]; then
      /usr/bin/mkdir -p /mnt/"${drname}" >> /dev/null 2>&1 || err "/usr/bin/mkdir -p /mnt/${drname} has a non-zero exit." 10
    fi
    
    print_exec "/usr/bin/rsync -aHAX ${dir}/ /mnt/${drname}/"
    if [[ "${DRY_RUN}" -eq 0 ]]; then
      /usr/bin/rsync -aHAX "${dir}"/ /mnt/"${drname}"/ >> /dev/null 2>&1 || err "/usr/bin/rsync -aHAX ${dir}/ /mnt/${drname}/ has a non-zero exit." 10
    fi
    
  done
  
  print_exec "/usr/bin/umount /mnt"
  if [[ "${DRY_RUN}" -eq 0 ]]; then
    /usr/bin/umount /mnt >> /dev/null 2>&1 || err "/usr/bin/umount /mnt has a non-zero exit." 10
  fi
}

########################################################################
# Drops the snapshot freeing disk space
# Globals:
#  CONFIG
# Arguments:
#  None
# Returns:
#   None
########################################################################
function drop () {
  local lvs
  lvs=$(lvs --noheadings -o lv_name | grep bup-)
 
  local vg
  vg=$(get_vg_name) || err "/usr/sbin/lvs could not return the name of the volume group" 1

  
  for lv in $lvs; do
    print_exec "/usr/bin/yes | /usr/sbin/lvremove ${vg}/${lv}"
    if [[ "${DRY_RUN}" -eq 0 ]]; then
      /usr/bin/yes | /usr/sbin/lvremove "${vg}"/"${lv}" >> /dev/null 2>&1 || err "/usr/bin/yes | /usr/sbin/lvremove ${vg}/${lv} has a non-zero exit." 10
    fi
  done
}

########################################################################
# Restores the snapshot and freeing disk space
# Globals:
#  CONFIG
# Arguments:
#  None
# Returns:
#   None
########################################################################
function restore () {

  local vg
  vg=$(get_vg_name) || err "/usr/sbin/lvs could not return the name of the volume group" 1

  print_exec "/usr/bin/mount /dev/${vg}/bup-physical /mnt"
  if [[ "${DRY_RUN}" -eq 0 ]]; then
    /usr/bin/mount /dev/"${vg}"/bup-physical /mnt >> /dev/null 2>&1  || err "/usr/bin/mount /dev/${vg}/bup-physical /mnt has a non-zero exit." 10
  fi
  
  for dir in $(list_devices 'physical' "$EXCLUDE" '2'); do
    local drname
    drname=$(/usr/bin/basename ${dir}) || err '/usr/bin/basename not found' 1
    
    print_exec "/usr/bin/rsync --delete -aHAX /mnt/${drname}/ ${dir}/"
    if [[ "${DRY_RUN}" -eq 0 ]]; then
      /usr/bin/rsync --delete -aHAX /mnt/"${drname}"/ "${dir}"/ >> /dev/null 2>&1  || err "/usr/bin/rsync --delete -aHAX /mnt/${drname}/ ${dir}/ has a non-zero exit." 10
    fi
    
  done
  
  print_exec "/usr/bin/umount /mnt"
  if [[ "${DRY_RUN}" -eq 0 ]]; then
    /usr/bin/umount /mnt >> /dev/null 2>&1  || err "/usr/bin/umount /mnt has a non-zero exit." 10
  fi

  local lvs
  lvs=$(lvs --noheadings -o lv_name | grep bup- | grep -v bup-physical)

  for lv in ${lvs}; do
    print_exec "/usr/sbin/lvconvert --merge ${vg}/${lv}"
    if [[ "${DRY_RUN}" -eq 0 ]]; then
      /usr/sbin/lvconvert --merge "${vg}/${lv}" >> /dev/null 2>&1  || err "/usr/sbin/lvconvert --merge ${vg}/${lv} has a non-zero exit." 10
    fi
    
  done
  
  for loc in $GRUB_CONFIG_FILES; do
    local fil
    fil=$(readlink -f $loc) || err "Could not execute /usr/bin/readlink" 1
    
    if [[ -f "$fil" ]]; then
      print_exec "/usr/sbin/grub2-mkconfig -o ${fil}"
      if [[ "${DRY_RUN}" -eq 0 ]]; then
         /usr/sbin/grub2-mkconfig -o "${fil}" >> /dev/null 2>&1  || err "/usr/sbin/grub2-mkconfig -o ${fil} has a non-zero exit." 10
      fi
    fi
  done
  
  print_exec "/usr/bin/yes | /usr/sbin/lvremove ${vg}/bup-physical"
  if [[ "${DRY_RUN}" -eq 0 ]]; then
    /usr/bin/yes | /usr/sbin/lvremove "${vg}"/bup-physical >> /dev/null 2>&1  || err "/usr/bin/yes | /usr/sbin/lvremove ${vg}/bup-physical has a non-zero exit." 10
  fi
  
  if [[ "${VERBOSE}" -eq 1 ]]; then
    echo
  fi
  echo "Please reboot the system."
}

########################################################################
# Print usage information of this script to the screen
# Globals:
#  None
# Arguments:
#  None
# Returns:
#   None
########################################################################
function usage () {
    echo "lvsnap [OPTIONS] ACTION"
    echo "ACTION must be 'create', 'drop' or 'restore'"
    echo "OPTIONS"
    echo "-v         Enable verbose output"
    echo "-d         Dry-run, don't do anything"
    echo "-h         Include /home"
    echo "-e         Include /boot/efi"
    echo "-x PATTERN Exclude device or mountpoints with PATTERN"
}

########################################################################
# Check if the action is valid or exit the script
# Globals:
#  None
# Arguments:
#  action
# Returns:
#   None
########################################################################
function validate_action () {
  
  local valid_actions="create drop restore"
  
  if [ -z "$1" ]; then
    err "No action is specified" 2 1
  fi
  
  local valid=0
  for possible_action in $valid_actions; do
    if [[ "${possible_action}" = $1 ]]; then
      valid=1
    fi
  done
  
  if [[ "${valid}" -ne 1 ]]; then
    err "$1 is not a valid action" 2 1
  fi
}

########################################################################
# Prints error and exits the script
# Globals:
#  None
# Arguments:
#  message
#  return_code
#  show_usage: 1 = True everything else is False
# Returns:
#   None
########################################################################
function err () {
  if [[ -z $2 || $2 -eq 0 ]]; then
    echo "ASSERT FAILED: Return code not given or equal to 0."
    echo "$1"
    exit 99
  fi
  
  echo "Error: $1"
  
  if [[ "$3" -eq 1 ]]; then
    echo ''
    usage
  fi
  exit $2
}

########################################################################
# Parses a config file
# Globals:
#   VERBOSE
# Arguments:
#   config_file
# Returns:
#   config: a hash of config values
########################################################################
function parse_config () {
  
  ########################################################################
  # Prints an extracted value from the config file
  # Globals:
  #   CONFIG
  # Arguments:
  #   config_file
  #   key
  # Returns:
  #   None
  ########################################################################
  function extract_config_value () {
    local value
    value=$(/usr/bin/grep "^$2" $1 | /usr/bin/cut -d= -f2)
    if [[ "${PIPESTATUS[0]}" -ne 0 || "${PIPESTATUS[1]}" -ne 0 ]]; then
      err "/usr/bin/grep or /usr/bin/cut was not found" 1
    fi
    echo "${value}"
  }
  
  local config_file="$1"
  
  # Find the correct config: use $1 if available then $HOME then /etc
  if [[ -z "${config_file}" ]]; then
    if [[ -f "${HOME}/${CONFIG_HOME_FILE}" ]]; then
      config_file="${HOME}/${CONFIG_HOME_FILE}"
    elif [[ -f "${CONFIG_ETC_FILE}" ]]; then
      config_file="${CONFIG_ETC_FILE}"
    else
      err "Could not find a config file. Please use the -c option" 4
    fi
  fi
  
  if [[ ! -f "${config_file}" ]]; then
    err "${config_file} is not a file." 4
  fi
  
  config_file=$(/usr/bin/readlink -f ${config_file}) || err "/usr/bin/readlink is not found" 1
  
  if [[ "${VERBOSE}" -eq 1 ]]; then
    echo "Using config file ${config_file}"
    echo
  fi
  
  local is_valid=$(extract_config_value "${config_file}" 'CONFIG_VALID')
  if [[ ! "${is_valid}" = 'YES' ]]; then
    err "${config_file} is not marked as valid" 5
  fi
  
  CONFIG+=( ["static"]=$(extract_config_value "${config_file}" 'PHYSICAL_DIRECTORY') )
  CONFIG+=( ["vg"]=$(extract_config_value "${config_file}" 'VOLUME_GROUP') )
  CONFIG+=( ["lv"]=$(extract_config_value "${config_file}" 'LOGICAL_VOLUME') )
}

########################################################################
# Prints a list of all devices and it's mountpoint which can be backed up
# Globals:
#   VERBOSE
# Arguments:
#   type     nothing, 'physical' or 'logical'    
#   exclude  patterns which should be excluded, seperated by a space
#   tp       1: devices, 2: mount points 1,2: devices and mountpounts
# Returns:
#   None
########################################################################
function list_devices () {

  local devices
  devices=$(/usr/bin/cat /proc/mounts | /usr/bin/grep '^/' | /usr/bin/grep -v ' /run/media' | /usr/bin/cut -d" " -f1,2)
  if [[ "${PIPESTATUS[0]}" -ne 0 || "${PIPESTATUS[1]}" -ne 0  || "${PIPESTATUS[2]}" -ne 0 || "${PIPESTATUS[3]}" -ne 0 ]]; then
    err "/usr/bin/cat, /usr/bin/cut or /usr/bin/grep was not found" 1
  fi
  while read -r line; do
    # NOTE: This could also be an || but this is more readable
    if [[ $1 = 'physical' && $line = /dev/mapper/* ]]; then
      continue
    elif [[ $1 = 'logical' && ! $line = /dev/mapper/* ]]; then
      continue
    fi
    
    for pattern in $2; do
      local dummy=$(echo $line | /usr/bin/grep $pattern)
      if [[ -n "$dummy"  ]]; then
        continue 2
      fi
    done
    
    echo $line | /usr/bin/cut -d' ' -f$3
  done <<< "$devices"
}

########################################################################
# Prints the name/size/... of an lv
# Globals:
#   None
# Arguments:
#   lv_name
#   property 
# Returns:
#   None
########################################################################
function get_lv_property () {
  local prop=$(/usr/sbin/lvs --noheadings -o $2 $1 )
  if [[ -z "$prop" ]]; then
    err "/usr/sbin/lvs could not return $2 of $1" 1
  fi
  echo $prop
}

########################################################################
# Prints the name of the volume group
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
########################################################################
function get_vg_name () {
  local prop=$(/usr/sbin/lvs --noheadings -o vg_name | head -n1 )
  if [[ -z "$prop" ]]; then
    err "/usr/sbin/lvs could not return name of the volume group" 1
  fi
  echo $prop
}

########################################################################
# Executes the script
# Globals:
#   VERBOSE
#   EXCLUDE
#   DRY_RUN
# Arguments:
#   $@
# Returns:
#   None
########################################################################
function main () {
  
  local uid
  uid=$(/usr/bin/id -u) || err "/usr/bin/id not found" 1
  if [[ ${uid} -ne 0 ]]; then
    err "You must be root." 3
  fi
  
  local include_home=0
  local include_efi=0
  while getopts "vdhx:" flag; do
    case "${flag}" in
      v) VERBOSE=1;;
      d) DRY_RUN=1;;
      h) include_home=1;;
      e) include_efi=1;;
      x) EXCLUDE+=" $OPTARG";;
    esac
  done
  
  if [[ $include_home -eq 0 ]]; then
    EXCLUDE+=" /home"
  fi
  if [[ $include_efi -eq 0 ]]; then
    EXCLUDE+=" /boot/efi"
  fi
  
  local action=${@:$OPTIND:1}
  validate_action "${action}"

  case "${action}" in
    create) create;;
    drop) drop;;
    restore) restore;;
  esac
}

main "$@"
